@import "variables";

:root {
    font-family: #{$font-family};
    --darker-color: #{map-get(map-get($variants, 'primary'), 'darker-color')};
    --variant-color: #{map-get(map-get($variants,'primary'), 'color')};
    --mutted-color: #{map-get(map-get($variants, 'primary'), 'mutted-color')};
    --contrast-color: #{map-get(map-get($variants, 'primary'), 'contrast-color')};
    --additional-space: #{map-get((map-get($scales, '7')), 'size')};

    font-size: #{map-get((map-get($scales, '3')), 'font-size')};
}

*, *::before, *::after {
    box-sizing: border-box;
}

body {
    margin: 0;
    padding: 0;

}

.page {
    --padding: #{map-get((map-get($scales, '0')), 'size')};
    padding: var(--padding);

    --variant-color: #{map-get(map-get($variants, 'light'), 'color')};
    --contrast-color: #{map-get(map-get($variants, 'light'), 'contrast-color')};

    background-color: var(--variant-color);
    color: var(--contrast-color);

    box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
}

.page-animated {
    transition: box-shadow 0.1s;
    &:hover {
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);;
    }
}

.btn {
    --padding: #{map-get((map-get($scales, '3')), 'size')};
    --padding-inline-start: 
    --padding-inline-end: calc(var(--padding) / 2);
    --margin: #{map-get((map-get($scales, '0')), 'size')};

    display: inline-block;

    border-radius: #{map-get((map-get($scales, '3')), 'size')};
    margin: var(--margin);

    padding-inline: var(--padding);
    padding-block: calc(var(--padding) / 2);

    text-align: center;
    cursor: pointer;
    transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    border: 1px solid transparent;
    text-decoration: none;

    /*user-select: none;*/
    vertical-align: middle;
    line-height: 1.5;


    background-color: var(--variant-color);
    color: var(--contrast-color);

    transition: background-color 0.2s;

    &:hover {
        background-color: var(--darker-color);
        text-decoration: none;
    }
}

.pill {
    border-radius: 1000em;
}

.header, .header-inline {
    --padding: #{map-get((map-get($scales, '3')), 'size')};
    --border-radius: #{map-get((map-get($scales, '3')), 'size')};

    padding: var(--padding);
    padding-inline-end: calc(var(--padding) + var(--additional-space));
    margin-inline-end: var(--additional-space);

    border-radius: 0 1000em 1000em 0;
    background-color: var(--variant-color);
    color: var(--contrast-color);

    width: fit-content;
    max-width: 90%;
}

.header-vertical, .header-block {
    --additional-space: #{map-get((map-get($scales, '9')), 'size')};
    --padding: #{map-get((map-get($scales, '3')), 'size')};
    --margin:#{map-get((map-get($scales, '0')), 'size')};
    padding: var(--padding);
    padding-block-end: var(--additional-space);

    margin: var(--margin);
    margin-inline-start: var(--additional-space);
    margin-inline-end: auto;
    margin-block-end: var(--additional-space);
    
    border-radius: 0 0 1000em 1000em;
    background-color: var(--variant-color);
    color: var(--contrast-color);

    width: max-content;
    text-align: center;

    display: flex;
    flex-direction: column;
    align-items: center;

    & * {
        text-align: center;
        width: max-content;
    }
    &.outline{
        border-block-start-width: 0;
    }

}

.footer, .footer-inline {
    --additional-space: #{map-get((map-get($scales, '3')), 'size')};
    --padding: #{map-get((map-get($scales, '3')), 'size')};
    --margin: #{map-get((map-get($scales, '0')), 'size')};
    --border-radius: #{map-get((map-get($scales, '3')), 'size')};

    padding: var(--padding);
    padding-inline-start: calc(var(--padding) + var(--additional-space));

    margin: calc(var(--margin));
    margin-inline-start: auto;
    margin-inline-end: 0;

    border-radius: 1000em 0 0 1000em;
    background-color: var(--variant-color);
    color: var(--contrast-color);
    width: fit-content;
    max-width: 90%;
    text-align: right;
}


.footer-vertical, .footer-block {
    --additional-space: #{map-get((map-get($scales, '9')), 'size')};
    --padding: #{map-get((map-get($scales, '3')), 'size')};
    --margin: #{map-get((map-get($scales, '0')), 'size')};

    padding: var(--padding);
    padding-block-start: var(--additional-space);

    margin: var(--margin);
    margin-inline-start: auto;
    margin-inline-end: var(--additional-space);

    border-radius: 1000em 1000em 0 0;
    background-color: var(--variant-color);
    color: var(--contrast-color);
    
    width: max-content;
    text-align: center;

    display: flex;
    flex-direction: column;
    align-items: center;

    & * {
        text-align: center;
        width: max-content;
    }
    &.outline{
        border-block-end-width: 0;
    }
}

@each $variant, $colors in $variants {
    .variant-#{$variant} {
        --variant-color: #{map-get($colors, 'color')};
        --mutted-color: #{map-get($colors, 'mutted-color')};
        --contrast-color: #{map-get($colors, 'contrast-color')};
        --darker-color: #{map-get($colors, 'darker-color')};
        &.outline {
            --darker-color: var(--mutted-color);
        }
    }

    .btn:hover.type-#{$variant} {
        background-color: map-get($colors, 'color-mutted');
    }
}

.outline {
    background-color: transparent;
    border: 1px solid var(--variant-color);
    color: var(--variant-color);
}

.mutted {
    color: var(--mutted-color);
    border-color: var(--mutted-color);
}

@each $variant, $colors in $variants {
    .bg-#{$variant} {
        background-color: #{map-get($colors, 'color')};
        color: #{map-get($colors, 'contrast-color')};
    }
}

.text-content {
    max-width: 35em;
}
.m-auto {
    margin: auto;
}

.mis-auto {
    margin-inline-start: auto;
}

.mie-auto {
    margin-inline-end: auto;
}

.mbs-auto {
    margin-block-start: auto;
}

.mbe-auto {
    margin-block-end: auto;
}

.w-max-content {
    width: max-content;
}

.w-min-content {
    width: min-content;
}



@each $scale, $value in $scales {
    @if map-has-key($value, 'size') {
        /* Margin */
        .m-#{$scale}-mod {
            --margin: #{map-get($value, 'size')};
        }
        .m-#{$scale} {
            margin: #{map-get($value, 'size')};
        }

        .mi-#{$scale} {
            margin-inline-start: #{map-get($value, 'size')};
            margin-inline-end: #{map-get($value, 'size')};
        }
        .mis-#{$scale} {
            margin-inline-start: #{map-get($value, 'size')};
        }
        .mie-#{$scale} {
            margin-inline-end: #{map-get($value, 'size')};
        }

        .mb-#{$scale} {
            margin-block-start: #{map-get($value, 'size')};
            margin-block-end: #{map-get($value, 'size')};
        }
        .mbs-#{$scale} {
            margin-block-start: #{map-get($value, 'size')};
        }
        .mbe-#{$scale} {
            margin-block-end: #{map-get($value, 'size')};
        }

        /* Padding */
        .p-#{$scale}-mod {
            --padding: #{map-get($value, 'size')};
        }
        .p-#{$scale} {
            padding: #{map-get($value, 'size')};
        }

        .pi-#{$scale} {
            padding-inline-start: #{map-get($value, 'size')};
            padding-inline-end: #{map-get($value, 'size')};
        }
        .pis-#{$scale} {
            padding-inline-start: #{map-get($value, 'size')};
        }
        .pie-#{$scale} {
            padding-inline-end: #{map-get($value, 'size')};
        }
        .pb-#{$scale} {
            padding-block-start: #{map-get($value, 'size')};
            padding-block-end: #{map-get($value, 'size')};
        }
        .pbs-#{$scale} {
            padding-block-start: #{map-get($value, 'size')};
        }
        .pbe-#{$scale} {
            padding-block-end: #{map-get($value, 'size')};
        }

        /* Border radius */
        .br-#{$scale} {
            border-radius: #{map-get($value, 'size')};
        }
        /* Additional space */
        .as-#{$scale} {
            --additional-space: #{map-get($value, 'size')};
        }

    }

    @if map-has-key($value, 'font-size') {
        .fs-#{$scale} {
            font-size: #{map-get($value, 'font-size')};
        }
    }
}

/*********** Displays ***********/
.d-inline {
    display: inline;
}

.d-inline-block {
    display: inline-block;
}

.d-block {
    display: block;
}

.d-flex {
    display: flex;
}

.d-inline-flex {
    display: inline-flex;
}

.flex-grow {
    flex-grow: 1;
}

.flex-shrink {
    flex-shrink: 1;
}

.flex-direction-row {
    flex-direction: row;
}

.flex-direction-row-reverse {
    flex-direction: row-reverse;
}

.flex-direction-column {
    flex-direction: column;
}

.flex-direction-column-reverse {
    flex-direction: column-reverse;
}

.d-grid {
    display: grid;
}

.d-inline-grid {
    display: inline-grid;
}

.align-items-start {
    align-items: start;
}

.align-items-center {
    align-items: center;
}

.align-items-end {
    align-items: end;
}

.align-items-stretch {
    align-items: stretch;
}


@each $scale, $value in $scales {
    @if map-has-key($value, 'size') {
        $size: map-get($value, 'size');

        @if $size > 0 {
            .grid-auto-fill-#{$scale} {
                grid-template-columns: repeat(auto-fill, minmax(Min(100%, #{$size}), 1fr));
            }

            .grid-auto-fit-#{$scale} {
                grid-template-columns: repeat(auto-fit, minmax(Min(100%, #{$size}), 1fr));
            }
        }

        .gap-#{$scale} {
            gap: #{$size};
        }
    }
}